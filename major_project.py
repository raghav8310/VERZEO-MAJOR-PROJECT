# -*- coding: utf-8 -*-
"""Major Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yVjy710HYyV98-X7F1fWAzgBlyxbI83u
"""

#Creating a Dataframe
import pandas as pd
df=pd.read_table("/content/Restaurant_Reviews.tsv")
df

"""**Exploratory Data Analysis**"""

df.info()

df.describe()
#Here as 50% is 0.5 hence data is BALANCED

df.shape

"""**Preparing Graphs**"""

import seaborn as sns
sns.countplot(df["Liked"])

sns.distplot(df['Liked'])

"""**Method1:Creating SVC model using count vectorizer**


"""

#Choosing the X and Y values
x=df["Review"].values

y=df["Liked"].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=5)

#Using count vectorizer for Preprocessing of data
from sklearn.feature_extraction.text import CountVectorizer
CV=CountVectorizer(stop_words="english")
x_train_vect=CV.fit_transform(x_train)
x_test_vect=CV.transform(x_test)
x_train_vect

#Using the SVC model Classifier
from sklearn.svm import SVC
model1=SVC()
model1.fit(x_train_vect,y_train)

y_pred1=model1.predict(x_test_vect)

#Now for testing accuracy only accuracy score is sufficient because data is BALANCED
from sklearn.metrics import accuracy_score
accuracy_score(y_pred1,y_test)

"""**Method 2: Creating a pipeline with Vectorization model and ML algorithm to predict the final sentiment**"""

from sklearn.pipeline import make_pipeline
model2=make_pipeline(CountVectorizer(),SVC())
model2.fit(x_train,y_train)

y_pred2=model2.predict(x_test)

accuracy_score(y_pred2,y_test)

"""**Method 3: Creating NB model and count vectorizer separately**

"""

#We have already done vectorization and stored values in x_train_vect and x_test_vect
#So moving on to apply Naive Bayes Model for predicting values
from sklearn.naive_bayes import MultinomialNB
model3=MultinomialNB()
model3.fit(x_train_vect,y_train)

y_pred3=model3.predict(x_test_vect)

accuracy_score(y_pred3,y_test)

"""**Method 4: Creating a pipeline with Vectorization model and ML algorithm to predict the
final sentiment for the multinomialNB and CountVectorizer**
"""

#Already imported pipeline so not repeating again
model4=make_pipeline(CountVectorizer(),MultinomialNB())
model4.fit(x_train,y_train)

y_pred4=model4.predict(x_test)

accuracy_score(y_pred4,y_test)

#Hence the highest accuracy we have got for method 2 , e.i. Pipeline method which includes SVC model.

#Using Joblib to create and save model with highest accuracy
import joblib 
joblib.dump(model2,"Sentiments")

reloaded_model=joblib.load("Sentiments")

!pip install streamlit --quiet

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import joblib
# st.title("Sentiment Analysis")
# 
# reloaded_model=joblib.load("Sentiments")
# 
# input1 = st.text_input("Please Enter your Review")
# output1 = reloaded_model.predict([input1])
# 
# if st.button("PREDICT") :
#   op = ['Negative review ðŸ˜¢' , 'Positive review ðŸ‘Œ']
#   st.title(op[output1[0]])
#

!streamlit run app.py  & npx localtunnel --port 8501

"""**Sentiment Analysis** : sentiment analysis which is also known as opinion mining is an aproach of NLP ( natural language processing ) which used to determine the emotion or feeling of some data or simply to say reviews. Many organizations use this technique to analyze their reviews of their products. this is wonderful method to analyze reviews of any products or data.


**Twitter Sentiment**: this is used to find out negative and positive reviews on your products or data in social media platforms such as twitter. This immensly helps you to detect angry or negative reviews.

"""